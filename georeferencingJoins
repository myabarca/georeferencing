### The following queries help combine related data from different tables that hold specimen occurrence records, locality records, and georeference data. ### 

# 1. Get lots with their just locality information (not including georeferencing data). 

SELECT * FROM lot
INNER JOIN locality ON lot.locationID = locality.locationID; 


# 2. Joining lots with their locality information and georeferencing data.
	# Select the columns you need from each table. This is just an exampe of columns we wanted to include.

SELECT
  lot.institutionCode,
  lot.collectionCode,
  lot.basisOfRecord,
  lot.occurrenceID,
  lot.scientificName,
  lot.taxonRank,
  lot.catalogNumber,
  lot.individualCount,
  lot.locationID,
  locality.recordedBy,
  locality.verbatimEventDate,
  locality.continent,
  locality.waterBody,
  locality.islandGroup,
  locality.island,
  locality.country,
  locality.stateProvince,
  locality.county,
  locality.earliestEonOrLowestEonothem,
  locality.latestEonOrHighestEonothem,
  locality.earliestEraOrLowestErathem,
  locality.latestEraOrHighestErathem,
  locality.earliestPeriodOrLowestSystem,
  locality.latestPeriodOrHighestSystem,
  locality.earliestEpochOrLowestSeries,
  locality.latestEpochOrHighestSeries,
  locality.earliestAgeOrLowestStage,
  locality.latestAgeOrHighestStage,
  locality.group,
  locality.formation,
  locality.member,
  locality.bed,
  georeference.decimalLatitude,
  georeference.decimalLongitude,
  georeference.geodeticDatum,
  georeference.coordinateUncertaintyInMeters
 FROM locality 
 INNER JOIN lot
 ON locality.locationID = lot.locationID
 INNER JOIN georeference ON georeference.locationID = lot.locationID;


  
# 2b. This approach would also work. It returned the same number of records as the method above.

SELECT
	lot.catalogNumber,
	locality.locationID,
    locality.county,
    locality.stateProvince,
    georeference.decimalLongitude,
    georeference.decimalLatitude
FROM lot, locality, georeference
WHERE
lot.locationID = locality.locationID AND 
locality.locationID = georeference.locationID; 


# 3. Get result set of only localities that are georeferenced. 
	# We should get the same number of records as the size of our georeference table.
SELECT
    locality.locationID,
    locality.county,
    locality.stateProvince,
    georeference.decimalLongitude,
    georeference.decimalLatitude
FROM locality
INNER JOIN georeference
ON locality.locationID = georeference.locationID;
